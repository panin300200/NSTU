#include <iostream>


using std::cin;
using std::cout;
using std::endl;


// статическая очередь (динамический массив)
class QueueS {
private:


    // n - размерность. begin - первый элемент(индекс). end - последний элемент(индекс).
    int size = NULL, begin = -1, end = begin;
    char* array; // как сделать тип который захочет пользователь?


public:


    // очистить очередь
    void clear() {
        begin = -1;
        end = begin;
    }


    // задать размерность очереди
    void size(int n) {
        size = n;
        array = new char[size];
        clear();
    }


    // удаление памяти под матрицу
    void del() {
        if(size != NULL)
            delete[] array;
    }


    // проверка на пустоту
    bool empty() {
        return !(bool)(begin + 1);
    }


    // проверка: есть место или нет
    bool has_size() {
        if (empty())
            return true;
        return end + 1 != size;
    }


    // взятие первого элемента
    char pop(char s) {
        if (!empty()) {
            s = array[begin];
            for (int i = 0; i < end; i++) {
                array[i] = array[i + 1];
            }
            end--;
            if (begin > end)
                clear();
            return s;
        }
        return '\0';
    }


    // значение первого элемента
    char getf() {
        if (!empty())
            return array[begin];
        return '\0';
    }


    // значение последнего элемента
    char getl() {
        if (!empty())
            return array[end];
        return '\0';
    }


    // добавить элемент в очередь
    void push(char s) {
        array[++end] = s;
        if (empty())
            begin = end;
    }


    //распечатать очередь
    void print() {
        if (!empty())
            for (int i = begin; i < end + 1; i++)
                cout << array[i] << ' ';
        cout << endl << endl;;
    }


    // ж) - функция приоритета очереди
    void priority() {

        if (!empty()) {
            char* copy_array = new char[end - begin + 1]; // массив


            // копирование массив
            for (int i = begin; i < end - begin + 1; i++)
                copy_array[i] = array[i];


            for (int i = begin; i < end; i++) {
                for (int k = i + 1; k < end - begin + 1; k++) {
                    if (array[i] > copy_array[k]) {
                        array[k] = array[i];
                        array[i] = copy_array[k];
                        copy_array[k] = array[k];
                    }
                }
            }


            // очистка копии и вывод оснв. массив
            delete[] copy_array;
            print();
        }
    }


};


// класс динамической очереди (двухсвязный циклический список с заглавным звеном)
class QueueD {


private:


    //список двухсвязный
    struct list {
        char data;
        list* next, * previous;
    }  *end = nullptr, * begin = end, * del;


    //создание первого элемента
    void create(char s) {
        end = new list;
        begin = end;
        end->data = s;
        end->next = begin;
        end->previous = begin;


    }


public:


    //проверка на пустоту / если пусто вернет true
    bool is_empty() {
        return end == nullptr;
    }


    //новый элемент
    void push(char s) {
        if (is_empty())
            create(s);
        else {
            end->next = new list;
            end->next->previous = end;
            end = end->next;
            end->next = begin;
            begin->previous = end;
            end->data = s;
        }
    }


    //получить первый элемент;
    char getf() {
        if (!is_empty()) {
            return begin->data;
        }
        return '\0';
    }


    //получить последний элемент
    char getl() {
        if(!is_empty()) {
            return begin->previous->data;
        }
        return '\0';
    }


    //взять элемент
    char pop(char s) {
        if (!is_empty()) {
            s = begin->data;
            del = begin;
            if (begin == begin->next) {
                end = nullptr;
                begin = end;
            }
            else {
                begin = begin->next;
                begin->previous = end;
                end->next = begin;
            }
            delete del;
            return s;
        }
        return '\0';
    }


    //oчистить очередь
    void clear() {
        for (end = begin->next; end != begin; del = end, end = end->next, delete del);
        delete begin;
        end = nullptr;
        begin = end;
    }


    //распечатать очередь
    void print() {
        for (end = begin; end->next != begin; end = end->next) {
            cout << end->data << ' ';
        }
        cout << end->data << ' ' << endl;
    }


};


// класс статического стэка (динамический массив)
class Stack {
private:


    //размерность стэка и индекс-указатель на последний элемент
    int size = NULL, top = -1;
    char* array;


public:


    // задать размерность стэка
    void size(int n) {
        size = n;
        array = new char[size];
        clear();
    }


    // проверка на пустоту
    bool empty() {
        return !(top + 1);
    }


    // взять последний элемент
    char pop() {
        if (!empty())
            return array[top--];
        return '\0';
    }


    // получить последний элемент
    char back() {
        if (!empty())
            return array[top];
        return '\0';
    }


    // добавить элемент в конец
    void push(char s) {
        if (top < size)
            array[++top] = s;
    }


    // очистка стэка
    void clear() {
        top = -1;
    }


    // распечатать стэк
    void print() {
        if (!empty())
            for (int i = 0; i < top + 1; i++)
                cout << array[i] << ' ';
    }


    // удалить массив(стэк)
    void del() {
        if (size != NULL)
            delete[] array;
    }


};
